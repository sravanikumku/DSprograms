#include<stdio.h>
#include<malloc.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node *next;
};
typedef struct node node;
node* create(node *first)
{   int x;
    node *new,*prev;
    printf("enter data -1 to exit");
    scanf("%d",&x);
    while(x!=-1)
    {   new=(node*)(malloc(sizeof(node)));
        new->data=x;
        new->next=NULL;
        if(first==NULL)
        {
            first=new;
            prev=new;
        }
        else
        {
            prev->next=new;
            prev=new;
        }
        printf("enter -1 to stop");
        scanf("%d",&x);
    }
    return first;
}
void display(node *first)
{
    node *temp=first;
    while(temp!=NULL)
    {
        printf("|%d|->",temp->data);
        temp=temp->next;
    }
    printf("NULL");
}
node* insertatbeg(node *first)
{
    node *new;
    int x;
    printf("enter ele ");
    scanf("%d",&x);
    new=(node*)(malloc(sizeof(node)));
    new->data=x;
    new->next=NULL;
    if(first==NULL)
    {
        first=new;
    }
    else
    {
        new->next=first;
        first=new;
        
    }
    return first;
}
node* insertatpos(node *first)
{   node *temp=first;
    int x,i,pos;
    printf("enter ele &pos");
    scanf("%d%d",&x,&pos);
    node *new;
    new=(node*)(malloc(sizeof(node)));
    new->data=x;
    new->next=NULL;
    if(pos>0)
    {
        for(i=1;i<pos-1;i++)
        {
            temp=temp->next;
        }
        new->next=temp->next;
        temp->next=new;
        
    }
    return first;
}
int countnodes(node *first)
{
    node *temp=first;
    int c=0;
    while(temp!=NULL)
    {
        c++;
        temp=temp->next ;
    }
    return c;
    
}
node* insertatend(node *first)
{   int x;
    node *new;
    printf("enter ele to insert");
    scanf("%d",&x);
    new=(node*)(malloc(sizeof(node)));
    new->data=x;
    new->next=NULL;
    node *temp=first;
    if(first==NULL)
    {
        first=new;
    }
    while(temp->next!=NULL)
    {
        temp=temp->next;
    }
    temp->next=new;
    return first;
}
void search(node *first)
{
    int x,flag=0;
    printf("enter ele to search");
    scanf("%d",&x);
    node *temp=first;
    while(temp!=NULL)
    {
        if(temp->data==x)
        {
            flag=1;
            break;
        }
        else
        {
            temp=temp->next;
        }
    }
    if(flag==1)
    {
        printf("the %d element is present",x);
    }
    else
    {
        printf("not present");
    }
}
node* sort(node *first)
{
    node *temp1,*temp2;
    int t;
    for(temp1=first;temp1!=NULL;temp1=temp1->next)
    { for(temp2=temp1->next;temp2!=NULL;temp2=temp2->next)
    {  if(temp1->data > temp2->data)
    {
        t=temp1->data;
        temp1->data=temp2->data;
        temp2->data=t;
    }
    
    
}
}
return first;
}
node* reverse(node *first)
{
    node * prev=NULL,*pre=first,*save;
    while(pre!=NULL)
    {
        save=pre->next;
        pre->next=prev;
        prev=pre;
        pre=save;
    }
return prev;
    
}
node *begin_delete(node *first)
{
    node * temp=first;
    first=first->next;
    free(temp);
    return first;
}
node * delete(node * first)
{
   int datapos;
   int i;
   node * temp=first;
   printf("enter pos to delete");
   scanf("%d",&datapos);
   node *t=first;
   node *k,*l;
    for (i=0;i<datapos-1;i++)
    {  
        k=t;
        t=t->next;
        l=t->next;
       
    }
    k->next=l;
    free(t);
    return first;
}
void main()
{
    node *head=NULL;
    int ch,count;
    while(1)
    {printf("\nenter choice\n");
    printf("\n1.create\n2.display\n3.insert at begging\n4.insertatpos\n5.insert at end\n6.sort\n7.countnodes\n8.search\n9.delete at pos\n11.delete at begg\n12.quit\n");
    scanf("%d",&ch);
    switch(ch)
    {
        case 1: head=create(head);
                break;
        case 2: display(head);
                break;
        case 3: head=insertatbeg(head);
                break;
        case 4: head=insertatpos(head);
                break;
        case 5: head=insertatend(head);
                break;
        case 6: head=sort(head);
                break;
        case 7: count=countnodes(head);
                printf(" no .of nodes is%d",count);
                break;
        case 8: search(head);
                break;
         case 9: head=delete(head);
                 break;
        case 10: head=reverse(head);
                break;
        case 11:head=begin_delete(head);
                break;
         case 12:exit(0);
        default :printf("enter between 1 to 11");
    }
    
}
}
